Total_TP = Total_TP + 1
if (dataset$reportedRating[r] >= n){
Total_TPcorrect = Total_TPcorrect + 1
}
}
if (dataset$targPres[r] == 0){
Total_TA = Total_TA + 1
if (dataset$reportedRating[r] >= n){
Total_TAincorrect = Total_TAincorrect + 1
}
}
}
hit_rate = Total_TPcorrect/Total_TP
false_rate = Total_TAincorrect/Total_TA
hit_rates[n] = hit_rate
false_rates[n] = false_rate
}
return(list(hit_rates,false_rates))
}
S1_S_1 = filter(ROC_data$subjectNum == 1,
ROC_data$whichTask == "Semantic",
ROC_data$otherSideCorrect ==1)
S1_S_1 = filter(ROC_data$subjectNum == 1,
ROC_data$whichTask == "Semantic",
ROC_data$otherSideCorrect ==1)
S1_S_1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==1)
S1_S_0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==0)
S1_C_1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==1)
S1_C_0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==0)
1S1 <- ROC_data %>%
### Data Preparation
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ROSE)
library(dplyr)
#library(ROCR)
#library(pROC)
#### Import data
#x1s1 <- read.delim('white2018_data/Expt1_IndivData/S1AllDat.txt')
#x1s2 <- read.delim('white2018_data/Expt1_IndivData/S2AllDat.txt')
#x1s3 <- read.delim('white2018_data/Expt1_IndivData/S3AllDat.txt')
#x1s4 <- read.delim('white2018_data/Expt1_IndivData/S4AllDat.txt')
#x1s5 <- read.delim('white2018_data/Expt1_IndivData/S5AllDat.txt')
#x1s6 <- read.delim('white2018_data/Expt1_IndivData/S6AllDat.txt')
#x1s7 <- read.delim('white2018_data/Expt1_IndivData/S7AllDat.txt')
#x1s8 <- read.delim('white2018_data/Expt1_IndivData/S8AllDat.txt')
#x1s9 <- read.delim('white2018_data/Expt1_IndivData/S9AllDat.txt')
#x1s10 <- read.delim('white2018_data/Expt1_IndivData/S10AllDat.txt')
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/data"
setwd(mypath)
# combine individual subject data into a single master data file
data_ls = list.files(path=mypath, pattern="*.txt")
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
#### Data exclusion / filtering
data <- data %>%
filter(excludeBlock_BadDifficulty!=1,
fixBreak!=1,
nResps == 2)
#### Prepare data for analysis - create columns etc.
ROC_data <- subset(data, select=c(blockNum, trial, subjectNum, targSide, whichTask, reportedRating, respCorrect, targPres))
otherSideCorrect = vector(mode = "integer", length = nrow(ROC_data))
for (i in seq(1, nrow(ROC_data) - 1, by=2)) {
if (ROC_data[i,]$respCorrect == 1) {
otherSideCorrect[i+1] = 1
}
if (ROC_data[i+1,]$respCorrect == 1) {
otherSideCorrect[i] = 1
}
}
ROC_data = cbind(ROC_data, otherSideCorrect)
# convert ratings to a 1-4 scale
for (i in seq(1, length(ROC_data$reportedRating))) {
if (ROC_data$reportedRating[i] > 0) {
ROC_data$reportedRating[i] = ROC_data$reportedRating[i] + 2
}
if (ROC_data$reportedRating[i] < 0) {
ROC_data$reportedRating[i] = ROC_data$reportedRating[i] + 3
}
}
for (task in seq(1, length(ROC_data$whichTask))) {
if (ROC_data$whichTask[task] == 1) {
ROC_data$whichTask[task] = "Semantic"
}
if (ROC_data$whichTask[task] == 2) {
ROC_data$whichTask[task] = "Color"
}
}
nResponses = unique(ROC_data$reportedRating)
ROC_points = function(dataset){
hit_rates = c(0,0,0,0,0)
false_rates = c(0,0,0,0,0)
for (n in seq(0, length(nResponses)+1)){
Total_TP = 0
Total_TA = 0
Total_TPcorrect = 0
Total_TAincorrect = 0
for (r in seq(1,nrow(dataset))){
if (dataset$targPres[r] == 1){
Total_TP = Total_TP + 1
if (dataset$reportedRating[r] >= n){
Total_TPcorrect = Total_TPcorrect + 1
}
}
if (dataset$targPres[r] == 0){
Total_TA = Total_TA + 1
if (dataset$reportedRating[r] >= n){
Total_TAincorrect = Total_TAincorrect + 1
}
}
}
hit_rate = Total_TPcorrect/Total_TP
false_rate = Total_TAincorrect/Total_TA
hit_rates[n] = hit_rate
false_rates[n] = false_rate
}
return(list(hit_rates,false_rates))
}
S1S1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==1)
S1S0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==0)
S1C1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==1)
S1C0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==0)
ROC_points(S1S1)
ROC_points(S1S0)
ROC_points(S1C1)
ROC_points(S1C0)
#reference this example of finding auc of roc when writing analysis code #https://machinelearningmastery.com/roc-curves-and-precision-recall-curves-for-clas#sification-in-python/
# Plot the Results
#ggplot(data = ROC_data,
#       mapping = aes(x = Ag_otherSideincorrect,
#                     y = Ag_otherSideCorrect,
#                     color = whichTask)) +
#  geom_point()
S1S1 <- ROC_points(S1S1)
View(S1S1)
S1S0 <- ROC_points(S1S0)
S1C1 <- ROC_points(S1C1)
S1C0 <- ROC_points(S1C0)
### Data Preparation
#### Load Relevant Libraries and Functions
library(tidyverse)
library(ROSE)
library(dplyr)
#library(ROCR)
#library(pROC)
#### Import data
#x1s1 <- read.delim('white2018_data/Expt1_IndivData/S1AllDat.txt')
#x1s2 <- read.delim('white2018_data/Expt1_IndivData/S2AllDat.txt')
#x1s3 <- read.delim('white2018_data/Expt1_IndivData/S3AllDat.txt')
#x1s4 <- read.delim('white2018_data/Expt1_IndivData/S4AllDat.txt')
#x1s5 <- read.delim('white2018_data/Expt1_IndivData/S5AllDat.txt')
#x1s6 <- read.delim('white2018_data/Expt1_IndivData/S6AllDat.txt')
#x1s7 <- read.delim('white2018_data/Expt1_IndivData/S7AllDat.txt')
#x1s8 <- read.delim('white2018_data/Expt1_IndivData/S8AllDat.txt')
#x1s9 <- read.delim('white2018_data/Expt1_IndivData/S9AllDat.txt')
#x1s10 <- read.delim('white2018_data/Expt1_IndivData/S10AllDat.txt')
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/data"
setwd(mypath)
# combine individual subject data into a single master data file
data_ls = list.files(path=mypath, pattern="*.txt")
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
#### Data exclusion / filtering
data <- data %>%
filter(excludeBlock_BadDifficulty!=1,
fixBreak!=1,
nResps == 2)
#### Prepare data for analysis - create columns etc.
ROC_data <- subset(data, select=c(blockNum, trial, subjectNum, targSide, whichTask, reportedRating, respCorrect, targPres))
otherSideCorrect = vector(mode = "integer", length = nrow(ROC_data))
for (i in seq(1, nrow(ROC_data) - 1, by=2)) {
if (ROC_data[i,]$respCorrect == 1) {
otherSideCorrect[i+1] = 1
}
if (ROC_data[i+1,]$respCorrect == 1) {
otherSideCorrect[i] = 1
}
}
ROC_data = cbind(ROC_data, otherSideCorrect)
# convert ratings to a 1-4 scale
for (i in seq(1, length(ROC_data$reportedRating))) {
if (ROC_data$reportedRating[i] > 0) {
ROC_data$reportedRating[i] = ROC_data$reportedRating[i] + 2
}
if (ROC_data$reportedRating[i] < 0) {
ROC_data$reportedRating[i] = ROC_data$reportedRating[i] + 3
}
}
for (task in seq(1, length(ROC_data$whichTask))) {
if (ROC_data$whichTask[task] == 1) {
ROC_data$whichTask[task] = "Semantic"
}
if (ROC_data$whichTask[task] == 2) {
ROC_data$whichTask[task] = "Color"
}
}
nResponses = unique(ROC_data$reportedRating)
ROC_points = function(dataset){
hit_rates = c(0,0,0,0,0)
false_rates = c(0,0,0,0,0)
for (n in seq(0, length(nResponses)+1)){
Total_TP = 0
Total_TA = 0
Total_TPcorrect = 0
Total_TAincorrect = 0
for (r in seq(1,nrow(dataset))){
if (dataset$targPres[r] == 1){
Total_TP = Total_TP + 1
if (dataset$reportedRating[r] >= n){
Total_TPcorrect = Total_TPcorrect + 1
}
}
if (dataset$targPres[r] == 0){
Total_TA = Total_TA + 1
if (dataset$reportedRating[r] >= n){
Total_TAincorrect = Total_TAincorrect + 1
}
}
}
hit_rate = Total_TPcorrect/Total_TP
false_rate = Total_TAincorrect/Total_TA
hit_rates[n] = hit_rate
false_rates[n] = false_rate
}
return(list(hit_rates,false_rates))
}
S1S1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==1)
S1S0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Semantic",
otherSideCorrect ==0)
S1C1 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==1)
S1C0 <- ROC_data %>%
filter(subjectNum == 1,
whichTask == "Color",
otherSideCorrect ==0)
S1S1 <- ROC_points(S1S1)
S1S0 <- ROC_points(S1S0)
S1C1 <- ROC_points(S1C1)
S1C0 <- ROC_points(S1C0)
S2S1 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Semantic",
otherSideCorrect ==1)
S2S0 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Semantic",
otherSideCorrect ==0)
S2C1 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Color",
otherSideCorrect ==1)
S2C0 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Color",
otherSideCorrect ==0)
S2S1 <- ROC_points(S1S1)
S2S1 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Semantic",
otherSideCorrect ==1)
S2S0 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Semantic",
otherSideCorrect ==0)
S2C1 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Color",
otherSideCorrect ==1)
S2C0 <- ROC_data %>%
filter(subjectNum == 2,
whichTask == "Color",
otherSideCorrect ==0)
S2S1 <- ROC_points(S2S1)
S2S0 <- ROC_points(S2S0)
S2C1 <- ROC_points(S2C1)
S2C0 <- ROC_points(S2C0)
S3S1 <- ROC_data %>%
filter(subjectNum == 3,
whichTask == "Semantic",
otherSideCorrect ==1)
S3S0 <- ROC_data %>%
filter(subjectNum == 3,
whichTask == "Semantic",
otherSideCorrect ==0)
S3C1 <- ROC_data %>%
filter(subjectNum == 3,
whichTask == "Color",
otherSideCorrect ==1)
S3C0 <- ROC_data %>%
filter(subjectNum == 3,
whichTask == "Color",
otherSideCorrect ==0)
S3S1 <- ROC_points(S3S1)
S3S0 <- ROC_points(S3S0)
S3C1 <- ROC_points(S3C1)
S3C0 <- ROC_points(S3C0)
S4S1 <- ROC_data %>%
filter(subjectNum == 4,
whichTask == "Semantic",
otherSideCorrect ==1)
S4S0 <- ROC_data %>%
filter(subjectNum == 4,
whichTask == "Semantic",
otherSideCorrect ==0)
S4C1 <- ROC_data %>%
filter(subjectNum == 4,
whichTask == "Color",
otherSideCorrect ==1)
S4C0 <- ROC_data %>%
filter(subjectNum == 4,
whichTask == "Color",
otherSideCorrect ==0)
S4S1 <- ROC_points(S4S1)
S4S0 <- ROC_points(S4S0)
S4C1 <- ROC_points(S4C1)
S4C0 <- ROC_points(S4C0)
S5S1 <- ROC_data %>%
filter(subjectNum == 5,
whichTask == "Semantic",
otherSideCorrect ==1)
S5S0 <- ROC_data %>%
filter(subjectNum == 5,
whichTask == "Semantic",
otherSideCorrect ==0)
S5C1 <- ROC_data %>%
filter(subjectNum == 5,
whichTask == "Color",
otherSideCorrect ==1)
S5C0 <- ROC_data %>%
filter(subjectNum == 5,
whichTask == "Color",
otherSideCorrect ==0)
S5S1 <- ROC_points(S5S1)
S5S0 <- ROC_points(S5S0)
S5C1 <- ROC_points(S5C1)
S5C0 <- ROC_points(S5C0)
S6S1 <- ROC_data %>%
filter(subjectNum == 6,
whichTask == "Semantic",
otherSideCorrect ==1)
S6S0 <- ROC_data %>%
filter(subjectNum == 6,
whichTask == "Semantic",
otherSideCorrect ==0)
S6C1 <- ROC_data %>%
filter(subjectNum == 6,
whichTask == "Color",
otherSideCorrect ==1)
S6C0 <- ROC_data %>%
filter(subjectNum == 6,
whichTask == "Color",
otherSideCorrect ==0)
S6S1 <- ROC_points(S6S1)
S6S0 <- ROC_points(S6S0)
S6C1 <- ROC_points(S6C1)
S6C0 <- ROC_points(S6C0)
S7S1 <- ROC_data %>%
filter(subjectNum == 7,
whichTask == "Semantic",
otherSideCorrect ==1)
S7S0 <- ROC_data %>%
filter(subjectNum == 7,
whichTask == "Semantic",
otherSideCorrect ==0)
S7C1 <- ROC_data %>%
filter(subjectNum == 7,
whichTask == "Color",
otherSideCorrect ==1)
S7C0 <- ROC_data %>%
filter(subjectNum == 7,
whichTask == "Color",
otherSideCorrect ==0)
S7S1 <- ROC_points(S7S1)
S7S0 <- ROC_points(S7S0)
S7C1 <- ROC_points(S7C1)
S7C0 <- ROC_points(S7C0)
S8S1 <- ROC_data %>%
filter(subjectNum == 8,
whichTask == "Semantic",
otherSideCorrect ==1)
S8S0 <- ROC_data %>%
filter(subjectNum == 8,
whichTask == "Semantic",
otherSideCorrect ==0)
S8C1 <- ROC_data %>%
filter(subjectNum == 8,
whichTask == "Color",
otherSideCorrect ==1)
S8C0 <- ROC_data %>%
filter(subjectNum == 8,
whichTask == "Color",
otherSideCorrect ==0)
S8S1 <- ROC_points(S8S1)
S8S0 <- ROC_points(S8S0)
S8C1 <- ROC_points(S8C1)
S8C0 <- ROC_points(S8C0)
S9S1 <- ROC_data %>%
filter(subjectNum == 9,
whichTask == "Semantic",
otherSideCorrect ==1)
S9S0 <- ROC_data %>%
filter(subjectNum == 9,
whichTask == "Semantic",
otherSideCorrect ==0)
S9C1 <- ROC_data %>%
filter(subjectNum == 9,
whichTask == "Color",
otherSideCorrect ==1)
S9C0 <- ROC_data %>%
filter(subjectNum == 9,
whichTask == "Color",
otherSideCorrect ==0)
S9S1 <- ROC_points(S9S1)
S9S0 <- ROC_points(S9S0)
S9C1 <- ROC_points(S9C1)
S9C0 <- ROC_points(S9C0)
S10S1 <- ROC_data %>%
filter(subjectNum == 10,
whichTask == "Semantic",
otherSideCorrect ==1)
S10S0 <- ROC_data %>%
filter(subjectNum == 10,
whichTask == "Semantic",
otherSideCorrect ==0)
S10C1 <- ROC_data %>%
filter(subjectNum == 10,
whichTask == "Color",
otherSideCorrect ==1)
S10C0 <- ROC_data %>%
filter(subjectNum == 10,
whichTask == "Color",
otherSideCorrect ==0)
S10S1 <- ROC_points(S10S1)
S10S0 <- ROC_points(S10S0)
S10C1 <- ROC_points(S10C1)
S10C0 <- ROC_points(S10C0)
View(S10C0)
plot(S1)
plot(S1S1[2],S1S1[1])
plot(S1S1[[2]],S1S1[[1]])
AUC(S1S1[[2]], S1S1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE, ...)
library(ROCR)
install.packages("ROCR")
library(ROCR)
AUC(S1S1[[2]], S1S1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE, ...)
install.packages("DescTools")
library(DescTools)
AUC(S1S1[[2]], S1S1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE, ...)
AUC(S1S1[[2]], S1S1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE)
S1Sy <- AUC(S1S1[[2]], S1S1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE)
S1Sx <- AUC(S1S0[[2]], S1S0[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE)
plot(S1Sx, S1Sy)
S1Cy <- AUC(S1C1[[2]], S1C1[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE)
S1Cx <- AUC(S1C0[[2]], S1C0[[1]],
method = c("trapezoid"),
absolutearea = FALSE, subdivisions = 100, na.rm = FALSE)
plot(S1Sx | S1Cx, S1Sy | S1Cy)
plot(S1Sx & S1Cx, S1Sy & S1Cy)
plot(S1Sx, S1Sy)
plot(S1Cx, S1Cy)
plot(X,Y)
X = as.vector(S1Sx, S1Cx)
X = as.list(S1Sx, S1Cx)
Y = as.list(S1Sy, S1Cy)
plot(X,Y)
plot(S1Sx, S1Sy)
plot(S1Cx, S1Cy)
