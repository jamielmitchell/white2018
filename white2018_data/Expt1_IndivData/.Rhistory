mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(MeanImprovementScore = mean(PostMusic, na.rm=T) - mean(PreMusic, na.rm=T))## Your code here
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1) #suggests range of 7
unique(d$HowActiveAngry1) #suggests range of 5
tail(d)
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game") ) # your code here: remove the columns containing "Game" in the name
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")## your code here
head(rating_hyp_long_d)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1) #suggests range of 7
unique(d$HowActiveAngry1) #suggests range of 5
tail(d)
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game") ) # your code here: remove the columns containing "Game" in the name
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")## your code here
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement),## Your code here
)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
group_by(ConfrontationalGame, Emotion) %>%
summarize(MeanRating = mean(Rating, na.rm = T))## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(MeanImprovementScore = mean(PostMusic, na.rm=T) - mean(PreMusic, na.rm=T))## Your code here
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
library(foreign) # for reading spss formatted data
library(tidyr)
library(dplyr)
library(stringr) # useful for some string manipulation
library(ggplot2)
d = read.spss("data/Tamiretal2008ReplicationData.sav", to.data.frame=T)
head(d)
colnames(d)
## your code here
unique(d$Game1Angry1) #suggests range of 7
unique(d$HowActiveAngry1) #suggests range of 5
tail(d)
filtered_d = d %>%
filter(is.na(DoNotUse)) # your code here: exclude subjects that are marked as "DoNotUse"
filtered_d = filtered_d %>%
select(c("Subject", "Cond"), # Generally important columns for both hypotheses
contains("Game"), # we want all the game columns for hypothesis 1
-contains("Intro"), -c("WhichGames", "GameComments"), # except these
starts_with("DinerDashWith"), c("SOFMusicEnemies", "SOFNoMusicEnemies")) # These columns are for hypothesis 2
rating_hyp_d = filtered_d %>%
filter(is.na(DoNotUseVideoGamePerformanceData)) %>% # first, let's get rid of the subjects who did so poorly on one game that their data is unusable
select(-DoNotUseVideoGamePerformanceData, # now get rid of that column
-starts_with("DinerDash"), # and the other columns we don't need
-starts_with("SOF"))
performance_hyp_d = filtered_d %>%
select(-contains("Game") ) # your code here: remove the columns containing "Game" in the name
tiny_demo_d = head(performance_hyp_d, 2) # get just the first two subjects performance data, for a demo
tiny_demo_d
tiny_demo_d %>% pivot_longer(cols=-c("Subject", "Cond"), # this tells it to transform all columns *except* these ones
names_to='Measurement',
values_to='Value')
performance_hyp_long_d = performance_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to='Measurement',
values_to='Score')
head(performance_hyp_long_d)
rating_hyp_long_d = rating_hyp_d %>%
pivot_longer(cols=-c("Subject", "Cond"),
names_to="Measurement",
values_to="Rating")## your code here
head(rating_hyp_long_d)
performance_hyp_long_d = performance_hyp_long_d %>%
mutate(ConfrontationalGame = grepl("SOF", Measurement), # create a new variable that will say whether the measurement was of the game soldier of fortune (SOF).
WithMusic = !grepl("NoMusic|WithoutMusic", Measurement), # creates a new column named WithMusic, which is False if the measurement contains *either* "NoMusic" or "WithoutMusic"
MusicCondition = factor(ifelse(Cond > 3, Cond-3, Cond), levels = 1:3, labels = c("Anger", "Exciting", "Neutral"))) # Get rid of uninterpretable condition labels
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
IsRecall = grepl("Friends|Strangers", Measurement),## Your code here
)
rating_hyp_long_d = rating_hyp_long_d %>%
mutate(
GameNumber = as.numeric(substr(rating_hyp_long_d$Measurement, 5, 5)),
ConfrontationalGame = GameNumber <= 2, # in a mutate, we can use a column we created (or changed) right away. Games 1 and 2 are confrontational, games 3 and 4 are not.
Emotion = str_extract(Measurement, "Angry|Neutral|Excited|Exciting|Calm"),
Emotion = ifelse(Emotion == "Excited", "Exciting", # this just gets rid of some annoying labeling choices
ifelse(Emotion == "Calm", "Neutral", Emotion))
)
performance_hyp_long_d %>%
group_by(ConfrontationalGame) %>%
summarize(AvgScore = mean(Score, na.rm=T)) # the na.rm tells R to ignore NA values
performance_hyp_long_d = performance_hyp_long_d %>%
group_by(ConfrontationalGame, WithMusic) %>% # we're going to compute four sets of z-scores, one for the confrontational game without music, one for the confrontational game with, one for the nonconfrontational game without music, and one for the nonconfrontational game with
mutate(z_scored_performance = scale(Score)) %>%
ungroup()
rating_summary_d = rating_hyp_long_d %>%
group_by(ConfrontationalGame, Emotion) %>%
summarize(MeanRating = mean(Rating, na.rm = T))## your code here
rating_summary_d
ggplot(rating_summary_d, aes(x=ConfrontationalGame, y=MeanRating, fill=Emotion)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
model = lm(Rating ~ ConfrontationalGame * Emotion, rating_hyp_long_d)
summary(model)
performance_diff_d = performance_hyp_long_d %>%
mutate(WithMusic = factor(WithMusic, levels=c(F, T), labels=c("PreMusic", "PostMusic"))) %>% # first, tweak the variable so our code is easier to read.
select(-c("Score", "Measurement")) %>% # now we remove columns we don't need (bonus: leave them in and see if you can understand what goes wrong!)
spread(WithMusic, z_scored_performance) %>%
mutate(ImprovementScore=PostMusic-PreMusic)
performance_diff_d
performance_diff_summary_d = performance_diff_d %>%
group_by(ConfrontationalGame, MusicCondition) %>%
summarize(MeanImprovementScore = mean(PostMusic, na.rm=T) - mean(PreMusic, na.rm=T))## Your code here
performance_diff_summary_d
ggplot(performance_diff_summary_d, aes(x=ConfrontationalGame, y=MeanImprovementScore, fill=MusicCondition)) +
geom_bar(position="dodge", stat="identity") +
scale_fill_brewer(palette="Set1")
performance_model = lm(ImprovementScore ~ ConfrontationalGame * MusicCondition, performance_diff_d)
summary(performance_model)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
x1p1 <- read.delim(".https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/S1AllDat.txt",
header = TRUE,
stringsAsFactors = FALSE)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
x1p1 <- read.delim(".https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/S1AllDat.txt")
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
x1p1 <- read.delim("https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/S1AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
x1p1 <- read.delim("https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/S1AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
View(x1p1)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
x1p1 <- read.delim("https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/S1AllDat.txt",
header = TRUE,
stringsAsFactors = FALSE)
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
View(x1p1)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("https://github.com/psych251/white_2018/blob/master/white2018_data/Expt1_IndivData/")
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData")
x1p1 <- read.delim("./S1AllDat.txt",
header = TRUE,
stringsAsFactors = FALSE)
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData")
x1p1 <- read.delim("./S1AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
View(x1p1)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData")
x1p1 <- read.delim("./S1AllDat.txt")
x1p2 <- read.delim("./S2AllDat.txt")
x1p3 <- read.delim("./S3AllDat.txt")
x1p4 <- read.delim("./S4AllDat.txt")
x1p5 <- read.delim("./S5AllDat.txt")
x1p6 <- read.delim("./S6AllDat.txt")
x1p7 <- read.delim("./S7AllDat.txt")
x1p8 <- read.delim("./S8AllDat.txt")
x1p9 <- read.delim("./S9AllDat.txt")
x1p10 <- read.delim("./S10AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
View(x1p1)
colnames(x1p1)
View(x1p1)
tail(x1p1)
tail(x1p2)
x1p1
View(x1p10)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData")
x1s1 <- read.delim("./S1AllDat.txt")
x1s2 <- read.delim("./S2AllDat.txt")
x1s3 <- read.delim("./S3AllDat.txt")
x1s4 <- read.delim("./S4AllDat.txt")
x1s5 <- read.delim("./S5AllDat.txt")
x1s6 <- read.delim("./S6AllDat.txt")
x1s7 <- read.delim("./S7AllDat.txt")
x1s8 <- read.delim("./S8AllDat.txt")
x1s9 <- read.delim("./S9AllDat.txt")
x1s10 <- read.delim("./S10AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
setwd("~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData")
x1s1 <- read.delim("./S1AllDat.txt")
x1s2 <- read.delim("./S2AllDat.txt")
x1s3 <- read.delim("./S3AllDat.txt")
x1s4 <- read.delim("./S4AllDat.txt")
x1s5 <- read.delim("./S5AllDat.txt")
x1s6 <- read.delim("./S6AllDat.txt")
x1s7 <- read.delim("./S7AllDat.txt")
x1s8 <- read.delim("./S8AllDat.txt")
x1s9 <- read.delim("./S9AllDat.txt")
x1s10 <- read.delim("./S10AllDat.txt")
#### combine individual subject data into a single master data file
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
getwd()
# Create list of text files
data_ls = list.files(path=mypath, pattern="*.txt")
# Read the files in, assuming comma separator
txt_files_df <- lapply(txt_files_ls, function(x) {read.table(file = x, header = T, sep =",")})
# Create list of text files
data_ls = list.files(path=mypath, pattern="*.txt")
# Read the files in, assuming comma separator
txt_files_df <- lapply(data_ls, function(x) {read.table(file = x, header = T, sep =",")})
getwd()
data_ls
# Read the files in, assuming comma separator
txt_files_df <- lapply(data_ls, function(x) {read.table(file = x, header = T, sep ="")})
data_ls = chr[1:10]"x1s1" "x1s2" "x1s3" "x1s4" "x1s5" "x1s6" "x1s7" "x1s8" "x1s9" "x1s0"
txt_files_df <- lapply(data_ls, function(x) {read.table(file = x, header = T, sep ="")})
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
# Create list of text files
file_list = list.files(path=mypath, pattern="*.txt")
# Read the files in
list_of_files <- lapply(file_list, read.delim)
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
x1s1 <- read.delim("./S1AllDat.txt")
x1s2 <- read.delim("./S2AllDat.txt")
x1s3 <- read.delim("./S3AllDat.txt")
x1s4 <- read.delim("./S4AllDat.txt")
x1s5 <- read.delim("./S5AllDat.txt")
x1s6 <- read.delim("./S6AllDat.txt")
x1s7 <- read.delim("./S7AllDat.txt")
x1s8 <- read.delim("./S8AllDat.txt")
x1s9 <- read.delim("./S9AllDat.txt")
x1s10 <- read.delim("./S10AllDat.txt")
#### combine individual subject data into a single master data file
# Create list of text files
data_ls = list.files(path=mypath, pattern="*.txt")
# Read the files in
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
# Combine them
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
## Load Relevant Libraries and Functions
#library(tidyverse)
## Import data
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
x1s1 <- read.delim("./S1AllDat.txt")
x1s2 <- read.delim("./S2AllDat.txt")
x1s3 <- read.delim("./S3AllDat.txt")
x1s4 <- read.delim("./S4AllDat.txt")
x1s5 <- read.delim("./S5AllDat.txt")
x1s6 <- read.delim("./S6AllDat.txt")
x1s7 <- read.delim("./S7AllDat.txt")
x1s8 <- read.delim("./S8AllDat.txt")
x1s9 <- read.delim("./S9AllDat.txt")
x1s10 <- read.delim("./S10AllDat.txt")
#### combine individual subject data into a single master data file
# Create list of text files
data_ls = list.files(path=mypath, pattern="*.txt")
# Read the files in
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
# Combine them
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
colnames(data)
## Load Relevant Libraries and Functions
#library(tidyverse)
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
#### combine individual subject data into a single master data file
data_ls = list.files(path=mypath, pattern="*.txt")
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
## Data exclusion / filtering
####get rid of fixation breaks
####trials for which excludeBlock_BadDifficulty equals 1 should be excluded from the analysis
## Prepare data for analysis - create columns etc.
library(tidyverse)
colnames(data)
data %>%
filter(excludeBlock_BadDifficulty=1,
fixBreak=1)
data %>%
filter(excludeBlock_BadDifficulty==1,
fixBreak==1)
View(data)
## Load Relevant Libraries and Functions
library(tidyverse)
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
#### combine individual subject data into a single master data file
data_ls = list.files(path=mypath, pattern="*.txt")
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
## Data exclusion / filtering
data %>%
filter(excludeBlock_BadDifficulty==1,
fixBreak==1)
## Prepare data for analysis - create columns etc.
View(data)
View(data)
## Load Relevant Libraries and Functions
library(tidyverse)
mypath = "~/Documents/Stanford/Courses/PSYCH_251/white_2018/white2018_data/Expt1_IndivData"
setwd(mypath)
#### combine individual subject data into a single master data file
data_ls = list.files(path=mypath, pattern="*.txt")
txt_files_df <- lapply(data_ls, function(x) {read.delim(file = x, header = T, sep ="")})
data <- do.call("rbind", lapply(txt_files_df, as.data.frame))
## Data exclusion / filtering
data %>%
filter(excludeBlock_BadDifficulty!=1,
fixBreak!=1)
## Prepare data for analysis - create columns etc.
View(data)
view(data)
data %>%
filter(item != 1,
condition != "fixBreak")
data %>%
filter(item != "1",
condition != "fixBreak")
data %>%
filter(excludeBlock_BadDifficulty!=1,
fixBreak!=1)
data <- data %>%
filter(excludeBlock_BadDifficulty!=1,
fixBreak!=1)
View(data)
